package practice.reactspringbootnettytoy1.movie.webflux;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;
import practice.reactspringbootnettytoy1.movie.entity.Movie;
import practice.reactspringbootnettytoy1.movie.service.MovieServiceImpl;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Mono< ? > return type is a special type for returning a stream of one element wrapped in ServerResponse
 * The stream is provided by Netty NioEventLoop (?)
 *
 * Use WebClient (non-blocking) to consume
 */
@Slf4j
@RequiredArgsConstructor
@Component
public class NettyReactiveHandlerMovie {


    private final MovieServiceImpl movieService;

    /*
    This simple reactive class could return many other things,
    including a stream of items from a database, a stream of items that were generated by calculations, and so on.

    Note the reactive code: a Mono object that holds a ServerResponse body.
     */
    public Mono<ServerResponse> getMovies(ServerRequest serverRequest) {

        log.info("***************" + serverRequest.toString() + "***************");
        Flux<Movie> fluxMovies = movieService.getAllMovies();

        return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(fluxMovies, Movie.class);
    }


//    public Mono<ServerResponse> postMovie() {
//        return ServerResponse
//                .ok()
//                .contentType(MediaType.TEXT_PLAIN)
//                .body(BodyInserters.fromValue("insert something here"));
//    }


/* refer to
	public Mono<ServerResponse> allPeople(ServerRequest request) {
		Flux<Person> people = this.repository.allPeople();
		return ServerResponse.ok().contentType(APPLICATION_JSON).body(people, Person.class);
	}
 */


}
